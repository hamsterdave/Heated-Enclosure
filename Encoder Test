#include <Thermistor.h>
#include <NTC_Thermistor.h>
#include <SmoothThermistor.h>

////Rotary Encoder Stuff////

#define encA    0
#define encB    1
#define button  7
#define ssr     10
#define safety 150

volatile bool aFlag = false; //Encoder pin A interrupt flag
volatile bool bFlag = false; // " " pin B " "
volatile bool buttonFlag = false; // " " Button " "
bool tempGood = false;       //Temp setting has been confirmed
volatile int encPos = 0;  //Current encoder position
int count = 0;           //Set temp    

double cabTemp = 0;
double ptcTemp = 0;
double tempMax = 80;
double ptcMax = 0;
double setTemp = 0;

////Temp Sensor Stuff////

#define SENSOR_PIN_CAB         A0
#define SENSOR_PIN_PTC         A1
#define REFERENCE_RESISTANCE   3920
#define NOMINAL_RESISTANCE     100000
#define NOMINAL_TEMPERATURE    25
#define B_VALUE                3950
#define SMOOTHING_FACTOR       20

Thermistor* thermistorCab = NULL;
Thermistor* thermistorPTC = NULL;



///Button has been pressed///
void buttonPress() {
  noInterrupts();
  buttonFlag = 1;
  interrupts();
}


//Encoder Pin A interrupt//
void aChange() {
  noInterrupts();
  aFlag = 1;
  interrupts();
}

//Encoder Pin B interrupt//
void bChange() {
  noInterrupts();
  bFlag = 1;
  interrupts();
}


//Determine count direction based on current position and last pin interrupt//
void encCount() {


  if (digitalRead(encA == 1)) {
    encPos + 2;  
  }                                  //These turn pinA and pinB into int = 0-3

  if (digitalRead(encB == 1)) {
    encPos + 1;
  }

  switch (encPos) {
    case 0: 
      if (aFlag == true) {
        count++;
      }
      if (bFlag == true) {
        count - 1;
      }
      break;
    case 1:
      if (aFlag == true) {
        count - 1;
      }
      if (bFlag == true) {
        count++;
      }
      break;
    case 2:
      if (aFlag == true) {
        count - 1;
      }
      if (bFlag == true) {
        count++;
      }
      break;
    case 3:
      if (aFlag == true) {
        count++;
      }
      if (bFlag ==true) {
        count - 1;
      }
      break;
  }

  aFlag = false;
  bFlag = false;

  if (count <= -1) {    //Roll over behavior based on number branches on menu tree (menuNum)
    count = tempMax;
  }
  if (count > tempMax) {
    count = 0;
  }
  delay(10);
}



void readTemp() {
  cabTemp = thermistorCab->readCelsius();
  ptcTemp = thermistorPTC->readCelsius();
}

void temperature() {

}



void setup() {
  pinMode(encA, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(encA),aChange,CHANGE);
  pinMode(encB, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(encB),bChange,CHANGE);
  pinMode(button, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(button),buttonPress,CHANGE);
  pinMode(ssr, OUTPUT);
  digitalWrite(ssr, LOW);

  thermistorCab = new SmoothThermistor(
    new NTC_Thermistor(
      SENSOR_PIN_CAB,
      REFERENCE_RESISTANCE,
      NOMINAL_RESISTANCE,
      NOMINAL_TEMPERATURE,
      B_VALUE
    ),
    SMOOTHING_FACTOR
  );

  thermistorPTC = new SmoothThermistor(
    new NTC_Thermistor(
      SENSOR_PIN_PTC,
      REFERENCE_RESISTANCE,
      NOMINAL_RESISTANCE,
      NOMINAL_TEMPERATURE,
      B_VALUE
    ),
    SMOOTHING_FACTOR
  );
  

}

void loop() {
  if (aFlag == true || bFlag == true) {
    encCount();
    Serial.println(count);
  }

}
